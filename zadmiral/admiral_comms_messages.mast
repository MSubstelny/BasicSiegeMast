# This is how the Admiral Console sends messages directly to player consoles.

# Create the Message button
//comms if has_roles(COMMS_ORIGIN_ID, 'admiral')
    + "Message" //comms/admiral/message

# When the Message button is clicked by the Admiral console
//comms/admiral/message if has_roles(COMMS_ORIGIN_ID, 'admiral')
    + "Back" //comms
    + "Message crew" //comms/admiral/message/crew
        
# When Message Crew button is clicked this presents a text input box labeled "Message" in the Property Panels on the Admiral's console.
//comms/admiral/message/crew if has_roles(COMMS_ORIGIN_ID, 'admiral')
    default prop_message = ""

    p = [{"label": "Message", "control": "gui_input", "props": "desc: Message", "var":"prop_message"}]
    gui_properties_set(p)

    # This presents buttons that say Back and All then it defines All.
    + "Back" //comms
    + "All":
        # Loop through all GUIs that are consoles.
        for console_client_id in role("console"):
            crew = get_inventory_value(console_client_id, "CREW_NAME")
            continue if crew is None or crew == ""
            # Send the message to text waterfall
            comms_broadcast(console_client_id, prop_message)

    # This presents buttons for selecting the individual players available to receive the message.
    for console_client_id in role("console"):
        crew = get_inventory_value(console_client_id, "CREW_NAME")
        continue if crew is None or crew == ""
        + "To {crew}" {"crew": crew, "console_client_id": console_client_id}:
            comms_broadcast(console_client_id, prop_message)


